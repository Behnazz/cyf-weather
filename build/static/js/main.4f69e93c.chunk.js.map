{"version":3,"sources":["img/weather-icons/clear.svg","img/weather-icons/storm.svg","img/weather-icons/drizzle.svg","img/weather-icons/fog.svg","img/weather-icons/mostlyCloudy.svg","img/weather-icons/partlyCloudy.svg","img/weather-icons/rain.svg","img/weather-icons/snow.svg","img/weather-icons/unknown.svg","Components/SearchCity.js","Components/CurrentWeather.js","Components/DayWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchCity","props","react_default","a","createElement","className","type","placeholder","value","inputValue","onChange","inputChange","onClick","search","CurrentWeather","weatherData","weatherId","weatherDescription","console","log","main","src","clear","storm","drizzle","rain","snow","fog","partlyCloudy","mostlyCloudy","unknown","alt","Math","round","temp","humidity","pressure","DayWeather","map","item","key","dt","dt_txt","split","weather","id","App","state","city","description","handleCityInput","e","_this","setState","target","handleSearch","_callee","data","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","list","stop","this","_this$state","Components_SearchCity","Components_CurrentWeather","Components_DayWeather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f69e93c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear.a0404ecc.svg\";","module.exports = __webpack_public_path__ + \"static/media/storm.80c60763.svg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.c2d0aafe.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.d4db296d.svg\";","module.exports = __webpack_public_path__ + \"static/media/mostlyCloudy.8e5d988e.svg\";","module.exports = __webpack_public_path__ + \"static/media/partlyCloudy.ed01f177.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.d6fe6255.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.041ad5ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/unknown.06cdd28b.svg\";","import React from \"react\";\nimport \"./searchCity.css\";\n\nconst SearchCity = props => {\n  return (\n    <div className=\"app__header\">\n      <input\n        className=\"searchInput\"\n        type=\"text\"\n        placeholder=\"city\"\n        value={props.inputValue}\n        onChange={props.inputChange}\n      />\n      <button className=\"searchButton\" onClick={props.search}>\n        Find Weather\n      </button>\n    </div>\n  );\n};\n\nexport default SearchCity;\n","import React from \"react\";\nimport \"./currentweather.css\";\nimport clear from \"../img/weather-icons/clear.svg\";\nimport storm from \"../img/weather-icons/storm.svg\";\nimport drizzle from \"../img/weather-icons/drizzle.svg\";\nimport fog from \"../img/weather-icons/fog.svg\";\nimport mostlyCloudy from \"../img/weather-icons/mostlyCloudy.svg\";\nimport partlyCloudy from \"../img/weather-icons/partlyCloudy.svg\";\nimport rain from \"../img/weather-icons/rain.svg\";\nimport snow from \"../img/weather-icons/snow.svg\";\nimport unknown from \"../img/weather-icons/unknown.svg\";\n\nconst CurrentWeather = props => {\n  const { weatherData, weatherId, weatherDescription } = props;\n  console.log(weatherData.main);\n\n  return (\n    <div>\n      <div className=\"centerImageDiv\">\n        <img\n          className=\"image\"\n          src={\n            weatherData !== \"\" && weatherId === 800\n              ? clear\n              : weatherId < 300\n              ? storm\n              : weatherId >= 300 && weatherId <= 499\n              ? drizzle\n              : weatherId  >= 500 && weatherId <= 599\n              ? rain\n              : weatherId >= 600 && weatherId <= 699\n              ? snow\n              : weatherId >= 700 && weatherId <= 799\n              ? fog\n              : weatherId === 801\n              ? partlyCloudy \n              : weatherId > 801 && weatherId <= 805\n              ? mostlyCloudy\n              : unknown\n          }\n          alt=\"weather icons\"\n        />\n      </div>\n      <div className=\"mainImageText\">\n        <h3>{weatherDescription}</h3>\n      </div>\n      <div className=\"mainImageTemp\">\n        <h3>Temperature {Math.round(weatherData.main.temp)} &#8451;</h3>\n      </div>\n      <div className=\"humidityPressureDiv\">\n        <h4 className=\"humidityPressure\">Humidity </h4>\n        <h5>{weatherData.main.humidity}%</h5>\n        <h4 className=\"humidityPressure\">Pressure</h4>\n        <h5>{weatherData.main.pressure}</h5>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\nimport \"./dayWeather.css\";\nimport clear from \"../img/weather-icons/clear.svg\";\nimport storm from \"../img/weather-icons/storm.svg\";\nimport drizzle from \"../img/weather-icons/drizzle.svg\";\nimport fog from \"../img/weather-icons/fog.svg\";\nimport mostlyCloudy from \"../img/weather-icons/mostlyCloudy.svg\";\nimport partlyCloudy from \"../img/weather-icons/partlyCloudy.svg\";\nimport rain from \"../img/weather-icons/rain.svg\";\nimport snow from \"../img/weather-icons/snow.svg\";\nimport unknown from \"../img/weather-icons/unknown.svg\";\n\nconst DayWeather = props => {\n  const { weatherData } = props;\n  return (\n    <div>\n      <div className=\"weekdays\">\n        {weatherData.map(item => (\n          <div key= {item.dt} className=\"days\">\n            <h4 className=\"time-temp\">{item.dt_txt.split(\" \")[1]}</h4>\n            <img\n              className=\"button-img\"\n              src={\n                weatherData !== \"\" && item.weather[0].id === 800\n                  ? clear\n                  : item.weather[0].id < 300\n                  ? storm\n                  : item.weather[0].id >= 300 && item.weather[0].id <= 499\n                  ? drizzle\n                  : item.weather[0].id >= 500 && item.weather[0].id <= 599\n                  ? rain\n                  : item.weather[0].id >= 600 && item.weather[0].id <= 699\n                  ? snow\n                  : item.weather[0].id >= 700 && item.weather[0].id <= 799\n                  ? fog\n                  : item.weather[0].id === 801\n                  ? partlyCloudy\n                  : item.weather[0].id > 801 && item.weather[0].id <= 805\n                  ? mostlyCloudy\n                  : unknown\n              }\n              alt=\"cloud\"\n            />\n            <h4 className=\"time-temp\">{Math.round(item.main.temp)} &#8451;</h4>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default DayWeather;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchCity from \"./Components/SearchCity\";\nimport CurrentWeather from \"./Components/CurrentWeather\";\nimport DayWeather from \"./Components/DayWeather\";\n\nclass App extends Component {\n  state = {\n    city: \"london\",\n    weather: \"\",\n    id :0,\n    description:\"\"\n\n  };\n\n  componentDidMount() {\n    console.log(this.state.city);\n    this.handleSearch();\n  }\n\n  handleCityInput = e => {\n    this.setState({\n      city: e.target.value\n    });\n  };\n\n  handleSearch = async () => {\n    const data = await fetch(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${\n        this.state.city\n      }&cnt=8&units=metric&appid=0c7674c74ce2a976435208059ac6092f`\n    );\n    const weatherData = await data.json();\n    this.setState({\n      weather: weatherData,\n      id: weatherData.list[0].weather[0].id,\n      description:weatherData.list[0].weather[0].description\n    });\n  };\n\n  render() {\n    console.log(this.state.weather);\n    const { weather ,id, description} = this.state;\n    console.log(id)\n    return (\n      weather !== \"\" && \n      <div className=\"app\">\n        <SearchCity\n          search={this.handleSearch}\n          inputChange={this.handleCityInput}\n          inputValue={this.state.city}\n        />\n        <div className=\"app__main\">\n          <CurrentWeather weatherData={weather !== \"\" && weather.list[0]} weatherId={id} weatherDescription={description}/>\n          <DayWeather  weatherData={weather !== \"\" && weather.list} />\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}